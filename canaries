#!/usr/bin/env python3

#    Copyright 2020 Oskar Sharipov <oskar.sharipov[at]tuta.io>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

'''
Generates static html file of messages signed by signify(1).

Usage:
    canaries [-q] <msgfolder>...
    canaries (-h | --help)
    canaries --version

Options:
    -q              Quiet mode.
    -h --help       Show this screen.
    --verion        Show version.

Exit status:
    0 - success.
    1 - invalid message path.
    2 - invalid files in path.

Examples:
    Generate a new html file of messages in msg/ directory:
        canaries -q msg
    Look at result in your web-browser:
        elinks canaries.html
'''

import os
import sys
import logging
from glob import glob
from typing import Tuple, List, Dict
import jinja2
from docopt import docopt


__version__ = '1.1.2'
__all__ = [
    'main',
    'grab_message_with_signature',
    'join_messages'
]

logger = logging.getLogger('canaries')
_handler = logging.StreamHandler()
_handler.setLevel(logging.INFO)
logger.addHandler(_handler)

def grab_message_with_signature(folder: str) -> Dict[str, str]:
    ''' searches for '*.sig' and its message in `folder` directory '''
    signatures = glob(os.path.join(folder, '*.sig'))
    if len(signatures) > 1:
        logger.error(f'There are more than one signature in `{folder}`.')
        sys.exit(2)
    elif not signatures:
        logger.error(f'There is no signatures in `{folder}". Expected one.')
        sys.exit(2)
    signature_file = signatures[0]
    message_file = signature_file[: -len('.sig')]
    if not os.path.isfile(message_file):
        logger.error(f'`{message_file}` doesn\'t exist or it\'s not a file.')
        sys.exit(2)

    with open(signature_file, 'r') as file:
        signature = file.read()
    with open(message_file, 'r') as file:
        message = file.read()

    return dict(name=folder, message=message, signature=signature)


def join_messages(signed_messages: List[Dict[str, str]]) -> str:
    ''' renders `signed_messages` by jinja2 template system '''
    with open('template.html', 'r') as file:
        template = jinja2.Template(file.read())
    return template.render(signed_messages=signed_messages)


def main() -> None:
    ''' parses args and does all magic '''
    args: Dict[str, str] = docopt(__doc__, version=__version__)

    logger.setLevel(logging.ERROR if args['-q'] else logging.INFO)
    signed_messages = list()
    for folder in args['<msgfolder>']:
        if not os.path.isdir(folder):
            logger.error(f'`{folder}` doesn\'t exist or it\'s not a folder.')
            sys.exit(1)
        signed_messages.append(grab_message_with_signature(folder))
        logger.info(f'Grabbed message from `{folder}`.')

    main_page = join_messages(signed_messages)
    with open('canaries.html', 'w') as file:
        file.write(main_page)
    logger.info('Write html to `canaries.html`.')


if __name__ == '__main__':
    main()
